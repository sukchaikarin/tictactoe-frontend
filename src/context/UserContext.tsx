"use client"
import { jwtDecode } from 'jwt-decode';
import { User, UserService } from "@/_service/users";
import { createContext, useContext, useState, useEffect, ReactNode } from "react";


// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User
interface UserPayload {
  user: {
    id: string;
  };
}

interface UserContextType {
  user: User | null; // ‡πÉ‡∏ä‡πâ user ‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠ null
  setUser: React.Dispatch<React.SetStateAction<User | null>>;
  gameStats: {
    score: number; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    streak: number; // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
  };
  win: () => void; // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡∏ô‡∏∞
  draw: () => void; // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠
  lose: () => void; // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏û‡πâ
}

const UserContext = createContext<UserContextType | undefined>(undefined);

export const useUser = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error("useUser must be used within a UserProvider");
  }
  return context;
};

interface UserProviderProps {
  children: ReactNode;
}

export const UserProvider = ({ children }: UserProviderProps) => {
  const [user, setUser] = useState<User | null>(null); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô user ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô object
  const [score, setScore] = useState<number>(0); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  
  const [streak, setStreak] = useState<number>(0); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
  

  useEffect(() => {
    const fetchUser = async (userId: string) => {
      try {
        const userData: User = await UserService.fetchUserById(userId); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å service
        setUser(userData); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ state user ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
      } catch (error) {
        console.error("Error fetching user:", error); // ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô console ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      }
    };

    const token = localStorage.getItem("token"); // ‡∏î‡∏∂‡∏á JWT token ‡∏à‡∏≤‡∏Å localStorage
    if (token) {
      try {
        // Decode the token to get the payload
        const decoded: UserPayload = jwtDecode(token); // ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ
        const userId = decoded.user.id; // ‡∏î‡∏∂‡∏á user ID ‡∏à‡∏≤‡∏Å payload
        fetchUser(userId); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      } catch (error) {
        console.error("Error decoding token:", error); // ‡πÅ‡∏™‡∏î‡∏á error ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ decode token
      }
    } else {
      console.warn("Token not found"); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token
    }
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
  const win = () => {
    console.log(score)
    setScore(prevScore => prevScore + 1); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 1
    setStreak(prevStreak => {
      const newStreak = prevStreak + 1; // ‡πÄ‡∏û‡∏¥‡πà‡∏° streak 1
      if (newStreak === 3) {
        setScore(prevScore => prevScore + 1); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏µ‡∏Å 1 ‡∏ñ‡πâ‡∏≤ streak ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 3
        return 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï streak ‡πÄ‡∏õ‡πá‡∏ô 0
      }
      return newStreak;
    });
    console.log("üöÄ ~ UserProvider ~ score:", score)
    console.log("üöÄ ~ UserProvider ~ streak:", streak)
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏°‡∏≠
  const draw = () => {
    setStreak(0); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï streak ‡πÄ‡∏õ‡πá‡∏ô 0
    console.log("üöÄ ~ UserProvider ~ score:", score)
    console.log("üöÄ ~ UserProvider ~ streak:", streak)
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
  const lose = () => {
    setScore(prevScore => prevScore - 1); // ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 1
    setStreak(0); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï streak ‡πÄ‡∏õ‡πá‡∏ô 0
    console.log("üöÄ ~ UserProvider ~ score:", score)
    console.log("üöÄ ~ UserProvider ~ streak:", streak)
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const gameStats = {
    score,
    streak,
  };

  return (
    <UserContext.Provider value={{ user, setUser, gameStats, win, draw, lose }}>
      {children}
    </UserContext.Provider>
  );
};
